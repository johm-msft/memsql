{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {

    "nodeType": {
      "type": "string",
      "allowedValues": [
        "leaf",
        "agg"
      ],
      "metadata": {
        "description": "node type leaf or aggregator"
      }
    },
    "nodeCount": {
      "type": "int",
      "defaultValue": 2,
      "minValue": 2,
      "maxValue": 100,
      "metadata": {
        "description": "node count for leaf of aggregator nodes, minimum is 2 for HA purposes"
      }
    },
    "virtualMachineSize": {
      "type": "string",
      "defaultValue": "Standard_DS3_v2",
      "metadata": {
        "description": "Virtual Machine Size"
      }
    },
    "networkName": {
      "type": "string",
      "defaultValue": "mem-sql",
      "metadata": {
        "description": "Virtual Network Name"

      }
    },
    "availabilitySetName": {
      "type": "string",
      "metadata": {
        "description": "availabilty set name"
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Username for the Virtual Machine."
      }
    },
    "sshKeyData": {
      "type": "string",
      "metadata": {
        "description": "SSH rsa public key file as a string."
      }
    },
    "memsqlRootPassword": {
      "type": "string",
      "metadata": {
        "description": "memsql root password"
      }
    },
    "aggSubnetName": {
      "type": "string",
      "defaultValue": "agg-subnet",
      "metadata": {
        "description": "The aggregator subnet name"
      }
    },
    "leafSubnetName": {
      "type": "string",
      "defaultValue": "leaf-subnet",
      "metadata": {
        "description": "The leaf subnet name"
      }
    }


  },
  "variables": {
    "deploymentConfig": {
      "apiVersions": {
        "nicApiVersion": "2017-06-01",
        "deploymentApiVersion": "2018-05-01",
        "vmApiVersion": "2017-03-30",
        "publicIpApiVersion": "2017-11-01",
        "nsgApiVersion": "2018-11-01",
        "vnetApiVersion": "2016-03-30",
        "vmExtensionApiVersion": "2015-06-15",
        "subnetApiVersion": "2017-10-01",
        "applicationGwApiVersion": "2017-10-01",
        "availabilitySetApiVersion": "2017-03-30",
        "loadBalancerApiVersion": "2018-02-01",
        "storageApiVersion": "2018-07-01"
      }
    },
    "storageAccountName": "[concat(parameters('nodeType'),uniquestring(resourceGroup().id))]",
    "storageAccountType": "Standard_LRS",
    "sshKeyPath": "[concat('/home/',parameters('adminUsername'),'/.ssh/authorized_keys')]",
    "computeconfig": {
      "imageInfo": {
        "imagePublisher": "RedHat",
        "offer": "RHEL",
        "sku": "7-RAW-CI",
        "version": "latest"
      }
    },
    "vmConfig": {
      "copy": [
        {
          "name": "items",
          "count": "[parameters('nodeCount')]",
          "input": {
            "vmname": "[concat(parameters('nodeType'),copyIndex('items'))]",
            "nicname": "[concat(parameters('nodeType'),'-NIC',copyIndex('items'))]"

          }
        }
      ]
    },
    "subnetLeaf": "[concat(resourceId('Microsoft.Network/virtualNetworks',parameters('networkName')), '/subnets/',parameters('leafSubnetName'))]",
    "subnetAgg": "[concat(resourceId('Microsoft.Network/virtualNetworks',parameters('networkName')), '/subnets/',parameters('aggSubnetName'))]",
    //cloud-init
    "cloud-config": "#cloud-config\n\n",
    "repoupgrade": "apt_update: false\napt_upgrade: false\n",
    "managedEtcHosts": "\nmanage_etc_hosts: true",
    //run section
    "data-disk-config-step1": "\n- sudo mkdir /mnt/memsql-data",
    "data-disk-config-step2": "\n- sudo mkdir /mnt/memsql-log",
    "data-disk-config-step3": "\n- for file in /dev/disk/azure/scsi1/*;do sudo pvcreate -ff -y $file;done",
    "data-disk-config-step4": "\n- DISKS=$(ls /dev/disk/azure/scsi1/*)",
    "data-disk-config-step5": "\n- sudo vgcreate vgmemsqldata $DISKS",
    "data-disk-config-step6": "\n- PHYSVOLUMES=$(ls -A /dev/disk/azure/scsi1 |wc -l)\n- STRIPESIZE=64",
    "data-disk-config-step7": "\n- sudo lvcreate -i$PHYSVOLUMES -I$STRIPESIZE -l 70%FREE -n datalv vgmemsqldata",
    "data-disk-config-step8": "\n- sudo lvcreate -i$PHYSVOLUMES -I$STRIPESIZE -l 100%FREE -n loglv vgmemsqldata",
    "data-disk-config-step9": "\n- sudo mkfs.ext4 /dev/vgmemsqldata/datalv\n- sudo mkfs.ext4 /dev/vgmemsqldata/loglv",
    "data-disk-config-step10": "\n- sudo mount /dev/vgmemsqldata/datalv /mnt/memsql-data\n- sudo mount /dev/vgmemsqldata/loglv /mnt/memsql-log",
    "data-disk-config-step11": "\n- echo '/dev/vgmemsqldata/datalv /mnt/memsql-data  ext4  defaults  0  2'|sudo tee -a /etc/fstab\n- echo '/dev/vgmemsqldata/loglv /mnt/memsql-log  ext4  defaults  0  2'|sudo tee -a /etc/fstab",
    "data-disk-config-all": "[concat(variables('data-disk-config-step1'),variables('data-disk-config-step2'),variables('data-disk-config-step3'),variables('data-disk-config-step4'),variables('data-disk-config-step5'),variables('data-disk-config-step6'),variables('data-disk-config-step7'),variables('data-disk-config-step8'),variables('data-disk-config-step9'),variables('data-disk-config-step10'),variables('data-disk-config-step11'))]",

    "jqDownload": "\n- sudo wget https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64 -O jq",
    "jqChown": "\n- sudo chmod +x jq",
    "jqMv2Bin": "\n- sudo mv jq /usr/local/bin",
    "firewallRules": "\n- sudo firewall-offline-cmd -p 3306:tcp\n- sudo kill -HUP firewalld",
    "makeDownloadDir": "\n- sudo mkdir /usr/local/downloads\n- cd /usr/local/downloads",

    "memsqlRootPwd": "[concat('\n- ROOT_PASSWORD=',parameters('memsqlRootPassword'))]",
    "memsqlDataDirOwner": "\n- sudo chown -LR memsql:memsql /mnt/memsql-data",
    "memsql-install-step1": "\n- ARRAY=('memsqlserver' 'memsqlclient')\n- BASEURL=\"https://release.memsql.com\"\n- INDEXURL=\"$BASEURL/production/index/{0}/latest.json\"",
    "memsql-install-step2": "\n- for i in \"${ARRAY[@]}\"; do RESULT=$(echo $INDEXURL | sed \"s/{0}/$i/g\"); echo $RESULT; FIND_DL_PATH=$(curl $RESULT | jq '.[\"packages\"]| .[].Path' |grep rpm |tr -d '\"'); DL_PATH=\"$BASEURL/$FIND_DL_PATH\";sudo wget $DL_PATH; done",
    "memsql-install-step3": "\n- sudo rpm -i /usr/local/downloads/*.rpm",
    "memsql-install-step4": "\n- sudo memsqlctl create-node --password \"$ROOT_PASSWORD\" --datadir /mnt/memsql-data -y",
    "memsql-install-step5": "\n- get_public_key(){ memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value FROM memsql_security.keys\" || echo '';}",
    "memsql-install-step6": "\n- PUBLIC_KEY=\"$(get_public_key)\"",
    "memsql-install-step7": "\n- while [ -z \"$PUBLIC_KEY\" ];do sleep 2; PUBLIC_KEY=\"$(get_public_key)\";done",
    "memsql-install-step8": "[concat('\n- echo $PUBLIC_KEY >> /home/', parameters('adminUsername'),'/.ssh/authorized_keys')]",
    "memsql-install-all": "[concat(variables('memsqlRootPwd'),variables('memsql-install-step1'),variables('memsql-install-step2'),variables('memsql-install-step3'),variables('memsqlDataDirOwner'),variables('memsql-install-step4'),variables('memsql-install-step5'),variables('memsql-install-step6'),variables('memsql-install-step7'),variables('memsql-install-step8'))]",
    "runCmd": "[concat('\nruncmd:',variables('data-disk-config-all'),variables('jqDownload'),variables('jqChown'),variables('jqMv2Bin'),variables('firewallRules'),variables('makeDownloadDir'),variables('memsql-install-all'))]",
    //end run section

    "customData": "[concat(variables('cloud-config'), variables('repoupgrade'),variables('managedEtcHosts'),variables('runCmd'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "apiVersion": "[variables('deploymentConfig').apiVersions.storageApiVersion]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "[variables('storageAccountType')]"
      },
      "kind": "Storage",
      "properties": {}
    },
    {
      "apiVersion": "[variables('deploymentConfig').apiVersions.nicApiVersion]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('vmConfig').items[copyIndex()].nicname]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "NICCopy",
        "count": "[parameters('nodeCount')]"
      },
      "dependsOn": [
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[if(equals(parameters('nodeType'), 'leaf'), variables('subnetLeaf'), variables('subnetAgg'))]"

              }


            }
          }
        ]
      }
    },
    {
      "apiVersion": "2017-03-30",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('vmConfig').items[copyIndex()].vmName]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "VMcopy",
        "count": "[parameters('nodeCount')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
        "NICCopy"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('virtualMachineSize')]"
        },
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',parameters('availabilitySetName'))]"
        },
        "osProfile": {
          "computerName": "[variables('vmConfig').items[copyIndex()].vmName]",
          "adminUsername": "[parameters('adminUsername')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": true,
            "ssh": {
              "publicKeys": [
                {
                  "path": "[variables('sshKeyPath')]",
                  "keyData": "[parameters('sshKeyData')]"
                }
              ]
            }
          },
          "customData": "[base64(variables('customData'))]"


        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('computeconfig').imageInfo.imagePublisher]",
            "offer": "[variables('computeconfig').imageInfo.offer]",
            "sku": "[variables('computeconfig').imageInfo.sku]",
            "version": "[variables('computeconfig').imageInfo.version]"
          },
          "osDisk": {
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "diskSizeGB": 1023,
              "lun": 0,
              "createOption": "Empty"
            }

          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('vmConfig').items[copyIndex()].nicname)]"

            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), '2016-01-01').primaryEndpoints.blob)]"
          }
        }
      }
    },
    {
      "condition": true,
      "comments": "Get Ip Address and Host Name for first VM",
      "name": "[concat('GetInfo',copyIndex())]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "[variables('deploymentConfig').apiVersions.deploymentApiVersion]",
      "dependsOn": [
        "vmCopy"
      ],
      "copy": {
        "name": "GetInfoCopy0",
        "count": 1
      },
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [],
          "Outputs": {
            "ipAddress": {
              "type": "array",
              "value": [
                "[reference(resourceId('Microsoft.Network/networkInterfaces',variables('vmConfig').items[copyIndex()].nicName),variables('deploymentConfig').apiVersions.nicApiVersion,'Full').properties.ipconfigurations[0].properties.privateIpAddress]"
              ]
            },
            "hostName": {
              "type": "array",
              "value": [
                "[reference(resourceId('Microsoft.Compute/virtualMachines',variables('vmConfig').items[copyIndex()].vmname),variables('deploymentConfig').apiVersions.vmApiVersion,'Full').properties.osProfile.computerName]"
              ]
            }
          }
        }
      }
    },
    {
      "condition": true,
      "comments": "Get Ip Address and Host Name for subsequent VMs and build two lists, one for each",
      "name": "[concat('GetInfo',copyIndex(1))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "[variables('deploymentConfig').apiVersions.deploymentApiVersion]",
      "dependsOn": [
        "GetInfoCopy0"
      ],
      "copy": {
        "name": "GetInfoCopyOthers",
        "count": "[sub(parameters('nodeCount'),1)]"
      },
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [],
          "Outputs": {
            "ipAddress": {
              "type": "array",
              "value": [
                "[reference(resourceId('Microsoft.Network/networkInterfaces',variables('vmConfig').items[copyIndex(1)].nicName),variables('deploymentConfig').apiVersions.nicApiVersion,'Full').properties.ipconfigurations[0].properties.privateIpAddress]"
              ]
            },
            "hostName": {
              "type": "array",
              "value": [
                "[reference(resourceId('Microsoft.Compute/virtualMachines',variables('vmConfig').items[copyIndex(1)].vmname),variables('deploymentConfig').apiVersions.vmApiVersion,'Full').properties.osProfile.computerName]"
              ]
            },
            "ipAddressList": {
              "type": "array",
              "value": "[union(createArray(reference(resourceId('Microsoft.Network/networkInterfaces',variables('vmConfig').items[copyIndex(1)].nicName),variables('deploymentConfig').apiVersions.nicApiVersion,'Full').properties.ipconfigurations[0].properties.privateIpAddress),reference(resourceId('Microsoft.Resources/deployments',concat('GetInfo',copyIndex())),variables('deploymentConfig').apiVersions.deploymentApiVersion).outputs.ipAddress.value)]"
            },
            "hostNameList": {
              "type": "array",
              "value": "[union(createArray(reference(resourceId('Microsoft.Compute/virtualMachines',variables('vmConfig').items[copyIndex(1)].vmname),variables('deploymentConfig').apiVersions.vmApiVersion,'Full').properties.osProfile.computerName),reference(resourceId('Microsoft.Resources/deployments',concat('GetInfo',copyIndex())),variables('deploymentConfig').apiVersions.deploymentApiVersion).outputs.hostName.value)]"
            }
          }
        }
      }
    }


  ],


  "outputs": {
    "ipAddressList": {
      "type": "string",
      "value": "[string(reference(resourceId('Microsoft.Resources/deployments',concat('GetInfo',sub(parameters('nodeCount'),1))),variables('deploymentConfig').apiVersions.deploymentApiVersion).outputs.ipAddressList.value)]"
    },
    "hostNameList": {
      "type": "array",
      "value": "[reference(resourceId('Microsoft.Resources/deployments',concat('GetInfo',sub(parameters('nodeCount'),1))),variables('deploymentConfig').apiVersions.deploymentApiVersion).outputs.hostNameList.value]"
    }
  }
}
